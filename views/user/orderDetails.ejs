<!DOCTYPE html>
<html lang="en">
<%- include ("../layout/header.ejs") %>
<body>
  <%- include ("../layout/navBarnew.ejs") %>
  <div class="container-fluid mb-5"  >
    <div class="container">
        <h4>Account</h4>
        <div class="d-flex gap-5 ">
            <div class="col-3 border px-5 py-5 rounded" >
              <p><a href="/profile" class="text-decoration-none fs-4 " style="color: #888888;" >Profile</a></p>
              <p><a href="/addresses" class="text-decoration-none fs-4 " style="color: #888888;" >Addresses</a></p>
              <p><a href="/order-history" class="text-decoration-none fs-4 " style="color: #888888;" >Order</a></p>
            </div>
            <div class="col-8 border shadow rounded px-5 fs-6">
                <h4 class="text-center" style="padding: 1.5rem 10rem;">Order History</h4>
                <p>Order Id : <%= order.orderId %></p>
                <p>Order Date : <%= moment(order.orderDate).format('MMMM Do YYYY, h:mm:ss')  %></p>
                <p>Order Status: <%= order.status %></p>
                <p>Shipping Address : <%= order.address %></p>
                <p>Payment Method : <%= order.paymentMethod %></p>
                <p>Wallet Amount Used : â‚¹<%= order.walletAmountUsed %></p>
                <p>Coupon Discount: <%= order.discount %></p>
                <h4 class="text-center" style="padding: 1.5rem 10rem;">Products</h4>
                <table class="table">
                    <tr>
                        <th>Product Name</th>
                        <th>Price</th>
                        <th>Quantity</th>                        
                        <th>Total</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                    <% order.products.forEach(item =>{%>
                        <tr>
                            <td class="py-5"><%= item.product.prod_name %></td>
                            <td class="py-5"><%= item.price %></td>                            
                            <td class="py-5"><%= item.quantity %></td>
                            <td class="py-5"><%= (item.price * item.quantity).toFixed(2) %></td>                            
                            <td class="py-5"><%= item.productStatus %></td>                         
                            <td class="py-5"><% if(item.productStatus === 'Pending'){%>
                                <button class="px-3 text-decoration-none fs-6 fw-bold  border rounded-2 bg-transparent " style="color: #BC4C2A;" onclick="cancelOrderItem('<%= order._id %>','<%= item.product._id %>')">CANCEL</button>
                                <%} else if (item.productStatus === 'Delivered'){ %>
                                  <button class="px-3 text-decoration-none fs-6 fw-bold  border rounded-2 bg-transparent " style="color: #BC4C2A;" onclick="returnOrderItem('<%= order._id %>','<%= item.product._id %>')">RETURN</button> 
                                  <%}%>
                            </td>
                        </tr>
                    <%})%>
                </table>
            </div>
        </div>
    </div>
  </div>
  <%- include ("../layout/footerUser.ejs") %>
  <script>
    async function cancelOrderItem(orderId,productId){
        const result = await Swal.fire({
        title: 'Are you sure?',
        text: 'Do you really want to cancel this item?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
      });

       if(result.isConfirmed){
        await fetch('/cancel-order-item',{
            method: 'POST',
            headers:{
                'Content-Type':'application/json'
            },
            body: JSON.stringify({orderId,productId})
        })
        .then(response => response.json())
        .then(data =>{
            if(data.success){
            Swal.fire({
            icon: 'success',
            text: 'Item cancelled successfully',
          }).then(()=>{
            location.reload();
          })                
            }else{
               
            Swal.fire({
            icon: 'Failure',
            text: 'Failed to cancel the item',
          })
            }       
        })
        .catch(error=>console.log(error));       
    }
}

async function returnOrderItem(orderId, productId) {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: 'Do you really want to return this item?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, return it!',
            cancelButtonText: 'No, keep it'
        });

        if (result.isConfirmed) {
            try {
                const response = await fetch('/return-order-item', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ orderId, productId })
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire('Returned!', 'The item has been returned.', 'success')
                        .then(() => {
                            location.reload();
                        });
                } else {
                    Swal.fire('Failed!', data.message || 'Failed to return the item.', 'error');
                }
            } catch (error) {
                console.log(error);
                Swal.fire('Error!', 'An error occurred while returning the item.', 'error');
            }
        }
    }

  </script>
</body>
</html>
                