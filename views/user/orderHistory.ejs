<!DOCTYPE html>
<html lang="en">
<%- include ("../layout/header.ejs") %>

    <body style="height: 100vh;">
        <%- include ("../layout/navBarnew.ejs") %>
            <div class="container-fluid mb-5">
                <div class="container">
                    <h4>Account</h4>
                    <div class="d-flex gap-5 ">
                        <%- include ("../layout/profileSidebar.ejs") %>
                            <div class="col-8 border shadow rounded px-5 py-5 d-flex flex-column align-items-center ">
                                <h4 class="text-center" style="padding: 1.5rem 10rem;">Order History</h4>
                                <%if (orders.length> 0 ) {%>
                                    <table class="table  ">
                                        <tr class="fs-6">
                                            <th scope="col" class="text-center">Order ID</th>
                                            <th scope="col" class="text-center">Date</th>
                                            <th scope="col" class="text-center">Total</th>
                                            <th scope="col" class="text-center">Status</th>
                                            <th scope="col" class="text-center">Payment Status</th>
                                            <th scope="col" colspan="3" class="text-center">Actions</th>
                                        </tr>

                                        <% orders.forEach(order=>{%>
                                            <tr class="">
                                                <td class="py-2 "><a href="/order-details/<%= order._id %>"
                                                        class="text-decoration-none text-black fw-bold">
                                                        <%= order.orderId %>
                                                    </a></td>
                                                <td class="py-2 ">
                                                    <%= moment(order.orderDate).format('D/MM/YYYY, h:mm:ss') %>
                                                </td>
                                                <td class="py-2 ">â‚¹<%= (order.total).toFixed(2) %>
                                                </td>
                                                <td class="py-2 ">
                                                    <%= order.status %>
                                                </td>
                                                <td class="py-2">
                                                    <%= order.paymentStatus %>
                                                </td>
                                                <td class="py-2">
                                                    <% if (order.status==='Pending' ) { %>
                                                        <button
                                                            class="px-3 text-decoration-none fs-6 fw-bold border rounded-2 bg-transparent"
                                                            style="color: #BC4C2A;"
                                                            onclick="cancelOrder('<%= order._id %>')">CANCEL
                                                            ORDER</button>
                                                        <% } else if (order.status==='Delivered' ) { %>
                                                            <button
                                                                class="px-3 text-decoration-none fs-6 fw-bold border rounded-2 bg-transparent"
                                                                style="color: #BC4C2A;"
                                                                onclick="returnOrder('<%= order._id %>')">RETURN
                                                                ORDER</button>
                                                            <% } %>
                                                                <% if (order.paymentStatus==='Failed' ) { %>
                                                                    <button
                                                                        class="px-3 text-decoration-none fs-6 fw-bold border rounded-2 bg-transparent"
                                                                        style="color: #BC4C2A;"
                                                                        onclick="retryPayment('<%= order._id %>')">RETRY
                                                                        PAYMENT</button>
                                                                    <% } %>
                                                </td>
                                            </tr>
                                            <% }) %>
                                    </table>
                                    <%} else {%>
                                        <h3>No orders found</h3>
                                        <% } %>
                                        <div class="d-flex flex-column gap-3">
                                            <div class="d-flex gap-3">
                                              <% if (currentPage > 1) { %>
                                              <a href="?page=<%= currentPage - 1 %>" class="text-decoration-none fw-bold fs-5 button rounded"> Prev</a>
                                              <% } %>
                                              <div class="d-flex gap-3 ">
                                              <% for (let i = 1; i <= totalPages; i++ ){ %>
                                              <a href="?page=<%= i %>" class="text-decoration-none fw-bold fs-5 button rounded" ><%= i %></a>                    
                                              <%}%>
                                              </div>
                                              <% if (currentPage < totalPages) { %>
                                              <a href="?page=<%= Number(currentPage) + 1 %>" class="text-decoration-none fw-bold fs-5 button rounded">Next</a>
                                              <% } %>
                                            </div>   
                                        </div>
                            </div>     
                              
                    </div>
                    
                </div>
            </div>
            <%- include ("../layout/footerUser.ejs") %>

                <script>
                    async function returnOrder(orderId) {
                        const { value: reason } = await Swal.fire({
                            title: 'Enter the reason for return',
                            input: 'text',
                            inputPlaceholder: 'Enter reason',
                            showCancelButton: true,
                            confirmButtonText: 'Submit',
                            cancelButtonText: 'Cancel',
                        });

                        if (reason) {
                            // Call the backend API to process the return request
                            await handleReturnRequest(orderId, reason);
                        }
                    }

                    async function handleReturnRequest(orderId, reason) {
                        try {
                            const response = await fetch('/return-order-request', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ orderId, reason }),
                            });

                            const data = await response.json();

                            if (data.success) {                               
                                location.reload();
                            } else {
                                Swal.fire('Error', data.message || 'Failed to submit return request.', 'error');
                            }
                        } catch (error) {
                            console.error('Error processing return request:', error);
                            Swal.fire('Error', 'An error occurred while processing the return request.', 'error');
                        }
                    }

                  

                    async function cancelOrder(orderId) {
                        const result = await Swal.fire({
                            title: 'Are you sure?',
                            text: 'Do you really want to cancel this item?',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes, cancel it!',
                            cancelButtonText: 'No, keep it'
                        });

                        if (result.isConfirmed) {
                            await fetch('/cancel-order', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ orderId })
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire({
                                            icon: 'success',
                                            text: 'Order canceled successfully',
                                        }).then(() => {
                                            location.reload();
                                        })

                                    } else {

                                        Swal.fire({
                                            icon: 'Failure',
                                            text: 'Failed to cancel order'
                                        })
                                    }
                                })
                        }
                    }

                    // async function returnOrder(orderId) {
                    //     const result = await Swal.fire({
                    //         title: 'Are you sure?',
                    //         text: 'Do you really want to return the full order?',
                    //         icon: 'warning',
                    //         showCancelButton: true,
                    //         confirmButtonText: 'Yes, return it!',
                    //         cancelButtonText: 'No, keep it'
                    //     });

                    //     if (result.isConfirmed) {
                    //         try {
                    //             const response = await fetch('/return-order', {
                    //                 method: 'POST',
                    //                 headers: {
                    //                     'Content-Type': 'application/json'
                    //                 },
                    //                 body: JSON.stringify({ orderId })
                    //             });

                    //             const data = await response.json();

                    //             if (data.success) {
                    //                 Swal.fire('Returned!', 'The full order has been returned.', 'success')
                    //                     .then(() => {
                    //                         location.reload();
                    //                     });
                    //             } else {
                    //                 Swal.fire('Failed!', data.message || 'Failed to return the full order.', 'error');
                    //             }
                    //         } catch (error) {
                    //             console.log(error);
                    //             Swal.fire('Error!', 'An error occurred while returning the full order.', 'error');
                    //         }
                    //     }
                    // }
                    async function retryPayment(orderId) {
                        const result = await Swal.fire({
                            title: 'Retry Payment',
                            text: 'Do you want to retry the payment for this order?',
                            icon: 'question',
                            showCancelButton: true,
                            confirmButtonText: 'Yes, retry payment',
                            cancelButtonText: 'No, cancel'
                        });

                        if (result.isConfirmed) {
                            try {
                                const response = await fetch(`/create-paypal-order/${orderId}`);
                                console.log(response)
                                if (response.ok) {


                                    const data = await response.json();
                                    console.log(data)

                                    if (data.id) {
                                        const paypalButtonContainer = document.createElement('div');
                                        paypalButtonContainer.id = 'paypal-button-container';
                                        await new Promise(resolve => setTimeout(resolve, 500));
                                        // Render PayPal buttons
                                        paypal.Buttons({
                                            createOrder: function () {
                                                return data.id;
                                            },
                                            onApprove: function (data, actions) {
                                                return actions.order.capture().then(function (details) {
                                                    return fetch('/paypal-success', {
                                                        method: 'post',
                                                        headers: {
                                                            'content-type': 'application/json'
                                                        },
                                                        body: JSON.stringify({
                                                            orderID: data.orderID,
                                                            payerID: data.payerID,
                                                            paymentID: details.id
                                                        })
                                                    });
                                                }).then(function (response) {
                                                    if (response.ok) {
                                                        window.location.href = '/order-confirmation/' + data.orderID;
                                                    } else {
                                                        window.location.href = '/order-history';
                                                    }
                                                })
                                            },
                                            onError: function (err) {
                                                console.error('PayPal button error:', err);
                                                Swal.fire('Error', 'An error occurred with the PayPal payment. Please try again.', 'error');
                                            }
                                        }).render(paypalButtonContainer);

                                        // Show PayPal button in a modal
                                        Swal.fire({
                                            title: 'Complete Payment',
                                            html: paypalButtonContainer,
                                            showConfirmButton: false,
                                            showCloseButton: true,
                                            onOpen: () => {
                                                setTimeout(() => {
                                                    paypal.Buttons({
                                                        createOrder: function () {
                                                            return data.id;
                                                        },
                                                        onApprove: function (data, actions) {
                                                            return actions.order.capture().then(function (details) {
                                                                return fetch('/paypal-success', {
                                                                    method: 'post',
                                                                    headers: {
                                                                        'content-type': 'application/json'
                                                                    },
                                                                    body: JSON.stringify({
                                                                        orderID: data.orderID,
                                                                        payerID: data.payerID,
                                                                        paymentID: details.id
                                                                    })
                                                                });
                                                            }).then(function (response) {

                                                                if (response.ok) {
                                                                    window.location.href = '/order-confirmation/' + data.orderID;
                                                                } else {
                                                                    window.location.href = '/order-history';
                                                                }
                                                            })

                                                        },
                                                        onError: function (err) {
                                                            console.error('PayPal button error:', err);
                                                            Swal.fire('Error', 'An error occurred with the PayPal payment. Please try again.', 'error');
                                                        }
                                                    }).render('#paypal-button-container');
                                                }, 500);
                                            }

                                        });
                                    } else {
                                        Swal.fire('Error', 'Failed to create PayPal order', 'error');
                                    }
                                } else {
                                    const errorMessage = await response.text();
                                    console.error('PayPal button error:', errorMessage);
                                    Swal.fire('Error', 'An error occurred with the PayPal payment. Please try again.', 'error');
                                }
                            } catch (error) {
                                console.error('Retry Payment Error:', error);
                                Swal.fire('Error', 'An error occurred while retrying payment', 'error');
                            }
                        }
                    }



                </script>
    </body>

</html>