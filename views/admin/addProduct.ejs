<!DOCTYPE html>
<html lang="en">
<%- include ("../layout/header.ejs") %>

  <body>
    <%- include ("../layout/navBarAdmin.ejs") %>
      <div class="container-fluid">
        <div class="container d-flex flex-column justify-content-center align-items-center mb-5 border px-3 py-3 rounded" style="width: 40%">
          <h2 class="mb-3 text-center">Add New Product</h2>
          <% if(typeof message !=="undefined" ){%>
            <div class="alert alert-danger">
              <%= message %>
            </div>
            <%}%>

              <form action="/admin/products/add-product" method="post" enctype="multipart/form-data" autocomplete="off"
                 id="productForm">
                <div class="mb-3">
                  <label for="name" class="form-label">Name</label>
                  <input type="text" class="form-control" id="name" name="name" required onchange="validateName()" />
                  <span id="nameError" style="color: red"></span>
                </div>
                <div class="mb-3 d-md-flex justify-content-between">
                  <div class="d-flex flex-column">
                    <label for="category" class="form-label">Category</label>
                    <select class="form-select" id="category" name="categoryId" required>
                      <% categories.forEach((category)=> { %>
                        <option value="<%= category._id %>">
                          <%= category.cat_name %>
                        </option>
                        <% }) %>
                    </select>
                  </div>

                  <div class="d-flex flex-column">
                    <label for="size" class="form-label">Size</label>
                    <select class="form-select" id="size" name="sizeId">
                      <% sizes.forEach((size)=> { %>
                        <option value="<%= size._id %>">
                          <%= size.size %>
                        </option>
                        <% }) %>
                    </select>
                  </div>

                  <div class="d-flex flex-column">
                    <label for="colour" class="form-label">Colour</label>
                    <select class="form-select" id="colour" name="colorId">
                      <% colors.forEach((color)=> { %>
                        <option value="<%= color._id %>">
                          <%= color.color_name %>
                        </option>
                        <% }) %>
                    </select>
                  </div>
                </div>
                <div class="mb-3 d-flex flex-column" style="width: 25%">
                  <label for="price" class="form-label">MRP</label>
                  <input type="number" class="form-control" id="mprice" name="mPrice" required
                    onchange="validateValues(mprice)" />
                  <span id="error" style="color: red"></span>
                </div>
               
                  
                <div class="mb-3 d-flex justify-content-between align-items-center">
                  <div class="mb-3 d-flex flex-column" style="width: 25%">
                    <label for="price" class="form-label">Price</label>
                    <input type="number" class="form-control" id="price" name="price" required
                      onchange="validatePrice()" />
                    <span id="error" style="color: red"></span>
                  </div>
                  <div class="mb-3 flex-column" style="width: 25%">
                    <label for="quantity" class="form-label">Quantity</label>
                    <input type="number" class="form-control" id="quantity" name="quantity" required
                      onchange="validateValues(quantity)" />
                    <span id="error" style="color: red"></span>
                  </div>
                  <div class="mb-3 flex-column">
                    <label for="rating" class="form-label" style="width: 25%">Rating</label>
                    <input type="number" class="form-control" id="rating" name="rating" step="0.1" min="1" max="5"
                      required onchange="validateValues(rating)" />
                    <span id="error" style="color: red"></span>
                  </div>
                </div>

                <div class="mb-3">
                  <label for="description" class="form-label">Description</label>
                  <textarea class="form-control" id="description" rows="3" name="description" onchange="validateProductDesc()" ></textarea>
                  <span id="descError" style="color: red;"></span>
              </div>

                <div class="input-group mb-3 d-flex flex-column">
                  <label for="images" class="form-label">Images</label>
                  <input type="file" class="form-control" id="images" name="images"
                    accept="image/*" style="width: 100%" multiple />
                  <div id="imagePreview" class="d-flex justify-content-between flex-wrap"></div>
                </div>

                <div class="mb-3">
                  <input type="submit" class="form-control fs-5" value="ADD NEW PRODUCT" required />
                </div>
                
              </form>
              <div class="mb-3 text-center" style="width:90%">
                <a href="/admin/products"class="form-control fs-5 text-decoration-none" >CANCEL</a>
                
              </div>
        </div>
      </div>
      <%- include ("../layout/footerAdmin.ejs") %>

      <script>


        document.addEventListener("DOMContentLoaded", function () {
          const imageInput = document.getElementById('images');
          const imagePreview = document.getElementById('imagePreview');

          imageInput.addEventListener('change', function () {
            // imagePreview.innerHTML = '';

            const files = Array.from(imageInput.files);

            files.forEach(file => {
              const reader = new FileReader();

              reader.onload = function (e) {
                const img = document.createElement('img');
                img.src = e.target.result;
                img.style.width = '150px'; // Adjust image size as needed
                img.style.height = '150px';
                img.style.margin = '10px';
                img.style.objectFit = 'cover'; // Ensure image covers the box
                img.setAttribute('data-original-src', e.target.result); // Store original image data
                img.setAttribute('data-cropped-src', ''); // Initialize cropped image data attribute
                img.addEventListener('click', function () {
                  // Initialize cropper on image click
                  const cropper = new Cropper(img, {
                    aspectRatio: 1, // Example 1:1 aspect ratio
                    viewMode: 1, // Restrict the cropping area to the image bounds
                    autoCropArea: 1, // Automatically resize the crop box to cover the entire image
                    crop(event) {
                      const canvas = cropper.getCroppedCanvas({
                        width: 500, // Adjust dimensions as needed for upload
                        height: 500
                      });

                      img.setAttribute('data-cropped-src', canvas.toDataURL()); // Store cropped image data

                      // Display the cropped image preview
                      img.src = canvas.toDataURL();
                    }
                  });
                });

                imagePreview.appendChild(img);
              }

              reader.readAsDataURL(file);
            });
          });
      
    });
   


    

  document.addEventListener("DOMContentLoaded", function () {
  const form = document.getElementById('productForm');
  const nameInput = document.getElementById('name');
  const priceInput = document.getElementById('price');
  const mpriceInput = document.getElementById('mprice');
  const quantityInput = document.getElementById('quantity');
  const ratingInput = document.getElementById('rating');
  const descriptionInput = document.getElementById('description');
  const errorContainer = document.createElement('div');
  errorContainer.id = 'errorContainer';
  errorContainer.style.color = 'red';
  form.insertBefore(errorContainer, form.firstChild);

  // Validation functions
  function validateName() {
    const name = nameInput.value.trim();
    if (name.length < 5) {
      setError('Name must be at least 5 characters long');
      return false;
    }
    clearError();
    return true;
  }

  function validatePrice() {
    const price = parseFloat(priceInput.value);
    if (isNaN(price) || price <= 0) {
      setError('Please enter a valid price greater than 0');
      return false;
    }
    clearError();
    return true;
  }

  function validateMPrice() {
    const mprice = parseFloat(mpriceInput.value);
    if (isNaN(mprice) || mprice <= 0) {
      setError('Please enter a valid MRP greater than 0');
      return false;
    }
    clearError();
    return true;
  }

  function validateQuantity() {
    const quantity = parseInt(quantityInput.value);
    if (isNaN(quantity) || quantity <= 0) {
      setError('Please enter a valid quantity greater than 0');
      return false;
    }
    clearError();
    return true;
  }

  function validateRating() {
    const rating = parseFloat(ratingInput.value);
    if (isNaN(rating) || rating < 1 || rating > 5) {
      setError('Please enter a valid rating between 1 and 5');
      return false;
    }
    clearError();
    return true;
  }

  function validateDescription() {
    const description = descriptionInput.value.trim();
    if (description.length < 10 || description.length > 200) {
      setError('Product description must be between 10 and 200 characters');
      return false;
    }
    clearError();
    return true;
  }

  // Helper functions
  function setError(message) {
    errorContainer.textContent = message;
  }

  function clearError() {
    errorContainer.textContent = '';
  }

  // Add event listeners for real-time validation
  nameInput.addEventListener('input', validateName);
  priceInput.addEventListener('input', validatePrice);
  mpriceInput.addEventListener('input', validateMPrice);
  quantityInput.addEventListener('input', validateQuantity);
  ratingInput.addEventListener('input', validateRating);
  descriptionInput.addEventListener('input', validateDescription);

  // Form submission validation
  form.addEventListener('submit', function(event) {
    const isValid = 
      validateName() &&
      validatePrice() &&
      validateMPrice() &&
      validateQuantity() &&
      validateRating() &&
      validateDescription();

    if (!isValid) {
      event.preventDefault();
    }
  });
})

      </script>
  </body>
</html>