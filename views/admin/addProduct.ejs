<!DOCTYPE html>
<html lang="en">
<%- include ("../layout/header.ejs") %>

  <body>
    <%- include ("../layout/navBarAdmin.ejs") %>
      <div class="container-fluid">
        <div class="container d-flex flex-column justify-content-center align-items-center mb-5 border px-3 py-3 rounded" style="width: 40%">
          <h2 class="mb-3 text-center">Add New Product</h2>
          <% if(typeof message !=="undefined" ){%>
            <div class="alert alert-danger">
              <%= message %>
            </div>
            <%}%>

              <form action="/admin/products/add-product" method="post" enctype="multipart/form-data" autocomplete="off"
                 id="productForm">
                <div class="mb-3">
                  <label for="name" class="form-label">Name</label>
                  <input type="text" class="form-control" id="name" name="name" required onchange="validateName()" />
                  <span id="nameError" style="color: red"></span>
                </div>
                <div class="mb-3 d-md-flex justify-content-between">
                  <div class="d-flex flex-column">
                    <label for="category" class="form-label">Category</label>
                    <select class="form-select" id="category" name="categoryId" required>
                      <% categories.forEach((category)=> { %>
                        <option value="<%= category._id %>">
                          <%= category.cat_name %>
                        </option>
                        <% }) %>
                    </select>
                  </div>

                  <div class="d-flex flex-column">
                    <label for="size" class="form-label">Size</label>
                    <select class="form-select" id="size" name="sizeId">
                      <% sizes.forEach((size)=> { %>
                        <option value="<%= size._id %>">
                          <%= size.size %>
                        </option>
                        <% }) %>
                    </select>
                  </div>

                  <div class="d-flex flex-column">
                    <label for="colour" class="form-label">Colour</label>
                    <select class="form-select" id="colour" name="colorId">
                      <% colors.forEach((color)=> { %>
                        <option value="<%= color._id %>">
                          <%= color.color_name %>
                        </option>
                        <% }) %>
                    </select>
                  </div>
                </div>
                <div class="mb-3 d-flex justify-content-between align-items-center">
                  <div class="mb-3 d-flex flex-column" style="width: 25%">
                    <label for="price" class="form-label">Price</label>
                    <input type="number" class="form-control" id="price" name="price" required
                      onchange="validatePrice()" />
                    <span id="error" style="color: red"></span>
                  </div>
                  <div class="mb-3 flex-column" style="width: 25%">
                    <label for="quantity" class="form-label">Quantity</label>
                    <input type="number" class="form-control" id="quantity" name="quantity" required
                      onchange="validateValues(quantity)" />
                    <span id="error" style="color: red"></span>
                  </div>
                  <div class="mb-3 flex-column">
                    <label for="rating" class="form-label" style="width: 25%">Rating</label>
                    <input type="number" class="form-control" id="rating" name="rating" step="0.1" min="1" max="5"
                      required onchange="validateValues(rating)" />
                    <span id="error" style="color: red"></span>
                  </div>
                </div>

                <div class="mb-3">
                  <label for="description" class="form-label">Description</label>
                  <textarea class="form-control" id="description" rows="3" name="description" onchange="validateProductDesc()" ></textarea>
                  <span id="descError" style="color: red;"></span>
              </div>

                <div class="input-group mb-3 d-flex flex-column">
                  <label for="images" class="form-label">Images</label>
                  <input type="file" class="form-control" id="images" name="images"
                    accept="image/*" style="width: 100%" multiple />
                  <div id="imagePreview" class="d-flex justify-content-between flex-wrap"></div>
                </div>

                <div class="mb-3">
                  <input type="submit" class="form-control fs-5" value="ADD NEW PRODUCT" required />
                </div>
                
              </form>
              <div class="mb-3 text-center" style="width:90%">
                <a href="/admin/products"class="form-control fs-5 text-decoration-none" >CANCEL</a>
                
              </div>
        </div>
      </div>
      <%- include ("../layout/footerAdmin.ejs") %>

      <script>


        document.addEventListener("DOMContentLoaded", function () {
          const imageInput = document.getElementById('images');
          const imagePreview = document.getElementById('imagePreview');

          imageInput.addEventListener('change', function () {
            // imagePreview.innerHTML = '';

            const files = Array.from(imageInput.files);

            files.forEach(file => {
              const reader = new FileReader();

              reader.onload = function (e) {
                const img = document.createElement('img');
                img.src = e.target.result;
                img.style.width = '150px'; // Adjust image size as needed
                img.style.height = '150px';
                img.style.margin = '10px';
                img.style.objectFit = 'cover'; // Ensure image covers the box
                img.setAttribute('data-original-src', e.target.result); // Store original image data
                img.setAttribute('data-cropped-src', ''); // Initialize cropped image data attribute
                img.addEventListener('click', function () {
                  // Initialize cropper on image click
                  const cropper = new Cropper(img, {
                    aspectRatio: 1, // Example 1:1 aspect ratio
                    viewMode: 1, // Restrict the cropping area to the image bounds
                    autoCropArea: 1, // Automatically resize the crop box to cover the entire image
                    crop(event) {
                      const canvas = cropper.getCroppedCanvas({
                        width: 500, // Adjust dimensions as needed for upload
                        height: 500
                      });

                      img.setAttribute('data-cropped-src', canvas.toDataURL()); // Store cropped image data

                      // Display the cropped image preview
                      img.src = canvas.toDataURL();
                    }
                  });
                });

                imagePreview.appendChild(img);
              }

              reader.readAsDataURL(file);
            });
          });
       
      //   productForm.addEventListener('submit', function (e) {
      //   e.preventDefault();
      //   const formData = new FormData(productForm);

      //   const croppedImages = Array.from(imagePreview.getElementsByTagName('img')).map((img, index) => {
      //     const croppedSrc = img.getAttribute('data-cropped-src') || img.src;
      //     formData.append(`image${index}`, croppedSrc);
      //   });

      //   fetch('/admin/products/add-product', {
      //     method: 'POST',
      //     body: formData
      //   })
      //   .then(response => response.json())
      //   .then(data => {
      //     console.log('Success:', data);
      //   })
      //   .catch(error => {
      //     console.error('Error:', error);
      //   });
      // });
    });
  
        //     document.getElementById('productPhoto').addEventListener('change', function(event) {
        //     const imageInput = event.target;
        //     const imagePreview = document.getElementById('imagePreview');


        //     let allFiles = [];
        //     let cropper;


        //     if(imageInput.files){
        //       const maxSize = 10 * 1024 * 1024; // 10MB limit
        //       for (let i = 0; i < files.length; i++) {
        //       const file = files[i];
        //       if (!file.type.startsWith('image/')) {
        //       alert('Only image files are allowed.');
        //       event.target.value = ''; // Clear the input
        //       return;
        //       }
        //       if (file.size > maxSize) {
        //       alert('File size must be less than 2MB.');
        //       event.target.value = ''; // Clear the input
        //       return;
        //       }
        //       }

        //       const files = Array.from(input.files);
        //       for(let i=0; i<length.files; i++){
        //           const file = files[i];
        //           const reader = new FileReader();

        //           reader.onload = function(e){
        //             const imageContainer = document.createElement("div");
        //             imageContainer.classList.add("product-image-container");
        //             const img = document.createElement("img");
        //             img.src = e.target.result;
        //             img.style.width = '200px';
        //             img.style.height = '200px';
        //             img.style.padding = "10px"

        //             const p_tag = document.createElement("p");
        //             p_tag.style.cssText = "max-width: 100px;";
        //             p_tag.textContent = file.name;


        //             // selected img deleting btn
        //             const deleteBtn = document.createElement("button");
        //             deleteBtn.classList.add("btn", "btn-primary", "btn-sm", "ms-auto");
        //             deleteBtn.innerText = "cancel";
        //             deleteBtn.addEventListener("click", (e) => {
        //             e.preventDefault();
        //             clearSelectedImages(file, imageContainer);
        //             });


        //             const cropBtn = document.createElement("button");
        //             cropBtn.innerText = 'Crop'
        //             cropBtn.classList.add("btn", "btn-primary", "btn-sm","ms-3");
        //             cropBtn.addEventListener("click", (e) => {
        //                 e.preventDefault();
        //                 cropBtn.disabled = true ;
        //                 cropImage(img, file,imageContainer,cropBtn,deleteBtn);
        //             });


        //             imageContainer.appendChild(img);
        //             imageContainer.appendChild(p_tag);
        //             imageContainer.appendChild(deleteBtn);
        //             imageContainer.appendChild(cropBtn);
        //             imagePreview.appendChild(imageContainer);

        //             };

        //              // Add the newly selected image to the allFiles array
        //             allFiles.push(file);
        //             reader.readAsDataURL(file);
        //             const dataTransfer = new DataTransfer();
        //             for (let i = 0; i < allFiles.length; i++) {
        //             dataTransfer.items.add(allFiles[i]);
        //             }
        //             input.files = dataTransfer.files;
        //       }
        //     }



        //   // image deleting function
        //   function clearSelectedImages(file,imageContainer){
        //      // Remove the file from the allFiles array
        //     const index = allFiles.indexOf(file);
        //     if (index !== -1) {
        //      allFiles.splice(index, 1);
        //     }

        //   // Update the file input with the remaining files
        //   const dataTransfer = new DataTransfer();
        //   for (let i = 0; i < allFiles.length; i++) {
        //     dataTransfer.items.add(allFiles[i]);
        //   }
        //   imageInput.files = dataTransfer.files;
        //   // Remove the image container
        //   imageContainer.remove();
        //   if (cropper) {
        //     cropper.destroy();
        //   }
        //   }



        //   // image cropping function
        //   function cropImage(img,file,imageContainer,cropBtn,deleteBtn) {

        //     if (cropper) {
        //     cropper.destroy();
        //     }

        //     cropper = new Cropper(img, {
        //     aspectRatio: 1,
        //     viewMode: 1,
        //     crop(event) {

        //     },
        //     });

        //   const cancelBtn = document.createElement("button");
        //   const saveBtn = document.createElement("button");
        //   const cancelCroppedImageBtn = document.createElement("button");

        //   cancelCroppedImageBtn.classList.add("btn", "btn-primary", "btn-sm", "ms-3","mb-4");
        //   cancelCroppedImageBtn.innerText = "Cancel Image"

        //   saveBtn.classList.add("btn", "btn-primary", "btn-sm", "ms-3");
        //   saveBtn.innerText = "Save";

        //   saveBtn.addEventListener("click", (e) => {
        //     e.preventDefault()
        //     const canvas = cropper.getCroppedCanvas();
        //     canvas.toBlob((blob) => {
        //       const croppedFile = new File([blob], file.name, {
        //         type: 'image/jpeg',
        //         lastModified: Date.now(),
        //       });

        //       const croppedImg = document.createElement("img");
        //       croppedImg.style.cssText = "max-width: 100px;height: 100px";

        //       // Set the cropped canvas data URL as the source for the new image element
        //       croppedImg.src = canvas.toDataURL();

        //        // Remove the original image from the container
        //        img.remove();

        //        imageContainer.appendChild(croppedImg);
        //        imageContainer.appendChild(cancelCroppedImageBtn);

        //        // Update the input files
        //       allFiles.push(croppedFile);


        //       cancelCroppedImageBtn.addEventListener('click',(e)=>{

        //        e.preventDefault();
        //        const index =  allFiles.indexOf(croppedFile);
        //        allFiles.splice(index,1);
        //        const dataTransfer = new DataTransfer();
        //         for (let i = 0; i < allFiles.length; i++) {
        //           dataTransfer.items.add(allFiles[i]);
        //         }
        //         imageInput.files = dataTransfer.files;
        //         imageContainer.remove()
        //       })

        //       updateInputFiles(file);
        //       cropper.destroy();
        //       saveBtn.style.display = 'none'
        //       cancelBtn.style.display = 'none'
        //       cropBtn.style.display = 'none'
        //       deleteBtn.style.display = 'none'

        //     }, 'image/jpeg');
        //     })
        //     cancelBtn.classList.add("btn", "btn-secondary", "btn-sm", "ms-3");
        //     cancelBtn.innerText = "Cancel Croping";
        //     cancelBtn.addEventListener("click", (e) => {
        //     e.preventDefault()
        //     cropper.destroy();
        //     cancelBtn.style.display = 'none'
        //     saveBtn.style.display = 'none'
        //     cropBtn.disabled = false ;
        //   });


        //   imageContainer.appendChild(cancelBtn);
        //   imageContainer.appendChild(saveBtn);


        //   }

        //   function updateInputFiles(file) {

        //   const index =  allFiles.indexOf(file);
        //   allFiles.splice(index,1);
        //   const dataTransfer = new DataTransfer();
        //   for (let i = 0; i < allFiles.length; i++) {
        //     dataTransfer.items.add(allFiles[i]);
        //   }
        //   imageInput.files = dataTransfer.files;
        // }

        //     });



        // validation scripts

        function validateName() {
          const name = document.getElementById("name").value.trim();
          const nameError = document.getElementById("nameError");

          if (name.length < 5) {
            nameError.textContent = "Name must be atleat 5 characters long"
          }

        }


        function validatePrice() {
          const priceInput = document.getElementById('price').value;
          const errorSpan = document.getElementById('error');
          // errorSpan.textContent = ''; // Clear previous error message
          if (isNaN(priceInput) || priceInput <= 0) {
            errorSpan.textContent = 'Please enter a valid amount greater than 0.';
          }
        }

        function validateValues(input) {
          const priceInput = document.getElementById('price').value;
          const quantityInput = document.getElementById('quantity').value;
          const ratingInput = document.getElementById('rating').value;
          const errorSpan = document.getElementById('error');

          errorSpan.textContent = ''; // Clear previous error message


          if (isNaN(priceInput) || priceInput <= 0) {
            errorSpan.textContent = 'Please enter a valid amount greater than 0.';
          }

          if (isNaN(quantityInput) || quantityInput <= 0) {
            errorSpan.textContent = 'Please enter a valid amount greater than 0.';
          }

          if (isNaN(ratingInput) || ratingInput <= 0) {
            errorSpan.textContent = 'Please enter a valid amount greater than 0.';
          }
        }

        function validateProductDesc(){
            var productDescription = document.getElementById('description').value.trim();
            const descError = document.getElementById("descError");
        
        
        if (productDescription.length < 10 || productDescription.length > 200) {        
            descError.textContent = "Product description must be between 10 and 200 characters";      
        } 
    };
      </script>
  </body>

</html>